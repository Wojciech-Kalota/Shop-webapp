@page "/"
@using Shared
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Shop</PageTitle>

<h1>Shop</h1>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <label for="search">Search:</label>
        <InputText id="search" class="form-control" @bind-Value="searchQuery" />
        <button class="btn btn-primary mt-2" @onclick="ApplySearch">Search</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Description</th>
                <th>Time posted</th>
                <th>Last update</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr @onclick="@(() => NavigateToDetails(product.Id))" style="cursor: pointer;">
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.CreatedDate</td>
                    <td>@product.UpdatedDate</td>
                </tr>
            }
        </tbody>
    </table>



    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>

    <h4>Add New Product</h4>
    <EditForm Model="newProduct" OnValidSubmit="CreateProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="newProduct.Name" />
        </div>
        <div class="mb-2">
            <label>Description</label>
            <InputTextArea class="form-control" @bind-Value="newProduct.Description" />
        </div>
        <button class="btn btn-success" type="submit" disabled="@IsPosting">Add Product</button>
    </EditForm>

    <hr />

}

@code {
    private List<ProductFull> products;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages;


    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private void NavigateToDetails(Guid id)
    {
        Navigation.NavigateTo($"/products/{id}");
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadProducts();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadProducts();
        }
    }

    private ProductEntity newProduct = new();
    private bool IsPosting = false;

    private async Task CreateProduct()
    {
        IsPosting = true;

        var response = await Http.PostAsJsonAsync("/api/products", newProduct);

        if (response.IsSuccessStatusCode)
        {
            newProduct = new();
            await LoadProducts(); 
        }

        IsPosting = false;
    }

    private string searchQuery = string.Empty;

    private async Task ApplySearch()
    {
        _currentPage = 1;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var encodedSearch = string.IsNullOrWhiteSpace(searchQuery)
            ? ""
            : $"&search={Uri.EscapeDataString(searchQuery)}";

        var url = $"products?page={_currentPage}&pageSize={_pageSize}{encodedSearch}";

        var result = await Http.GetFromJsonAsync<PageResult<ProductFull>>(url);

        products = result.Items;
        _totalPages = result.TotalPages;
    }

}
